05-树8 File Transfer （25 分）
We have a network of computers and a list of bi-directional connections. Each of these connections allows a file transfer from one computer to another. Is it possible to send a file from any computer on the network to any other?

Input Specification:
Each input file contains one test case. For each test case, the first line contains N (2≤N≤10​4​​), the total number of computers in a network. Each computer in the network is then represented by a positive integer between 1 and N. Then in the following lines, the input is given in the format:

I c1 c2  
where I stands for inputting a connection between c1 and c2; or

C c1 c2    
where C stands for checking if it is possible to transfer files between c1 and c2; or

S
where S stands for stopping this case.

Output Specification:
For each C case, print in one line the word "yes" or "no" if it is possible or impossible to transfer files between c1 and c2, respectively. At the end of each case, print in one line "The network is connected." if there is a path between any pair of computers; or "There are kcomponents." where k is the number of connected components in this network.

Sample Input 1:
5
C 3 2
I 3 2
C 1 5
I 4 5
I 2 4
C 3 5
S
Sample Output 1:
no
no
yes
There are 2 components.
Sample Input 2:
5
C 3 2
I 3 2
C 1 5
I 4 5
I 2 4
C 3 5
I 1 3
C 1 5
S
Sample Output 2:
no
no
yes
yes
The network is connected.

Code:
#include<cstdio>
#define Maxitem 10000

int S[Maxitem];
//采用路径压缩，尾递归寻找他的根结点
int find(int x){
    if(S[x]<0)return x;
    ////先找到根； 把根变成 X 的父结点； 再返回根。
    else return S[x]=find(S[x]);
}
 //按秩归并，将根结点数量少的树连接到根结点多的树，这里用S[root]表示根结点
 //S[root]为负数，绝对值为节点数
void Union(int root1,int root2){   
    if(S[root1]>S[root2]){
        S[root2]+=S[root1];
        S[root1]=root2;
    }else {
        S[root1]+=S[root2];
        S[root2]=root1;
    }
}
void initialzation(int n){
    for(int i=0;i<n;i++){
        S[i]=-1;
    }
}
void Input_connection(){
    int u,v,root1,root2;
    scanf("%d %d",&u,&v);
    getchar();
    root1=find(u-1);
    root2=find(v-1);
    Union(root1,root2);
}
void Check_connection(){
    int u,v,root1,root2;
    scanf("%d %d",&u,&v);
    getchar();
    root1=find(u-1);
    root2=find(v-1);
    if(root1==root2)printf("yes\n");
    else printf("no\n");
}
void Check_networks(int n){
    int count=0;
    for(int i=0;i<n;i++)
    if(S[i]<0)count++;
    if(count==1)printf("The network is connected.\n");
    else printf("There are %d components.\n",count);
}
int main(){
    char in;
    int n;
    scanf("%d",&n);
    initialzation(n);
    do{
        scanf("%c",&in);
        switch(in){
            case'I':Input_connection();break;
            case'C':Check_connection();break;
            case'S':Check_networks(n);break;
        }
    }while(in!='S');
    return 0;
}
