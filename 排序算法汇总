1.冒泡排序  2.插入排序  3.堆排序  4.归并排序

程序框架：

#include<cstdio>
#include<stdlib.h>
using namespace std;

int main(){
 int n;
  scanf("%d",&n);
  int a[n];
  for(int i=0;i<n;i++){
    scanf("%d",&a[i]);
  }
  Sort(a,n);
  for(int i=0;i<n;i++){
    printf("%d",a[i]);
    if(i!=n-1)printf(" ");
  }
  
  
}


//冒泡排序 
void Bubble_Sort(int a[],int n){
  int p;  int i; int temp;
 	for(p=n-1;p>=0;p--){
 	int	flag=0;
 		for(i=0;i<p;i++){
 			if(a[i]>a[i+1]){
 				temp=a[i];
 				a[i]=a[i+1];
 				a[i+1]=temp;
 				flag=1;
			 }
			
		 }
		  if(flag==0)break;
	 }
}
 	
 //插入排序
 void Sort(int a[],int n){
 	int i;
 	int p;
	for(p=1;p<n;p++){
		int temp=a[p];
		for(i=p;i>=0&&a[i-1]>temp;i--){
			a[i]=a[i-1];
		}
		a[i]=temp;
	}
 } 
 
 
 //堆排序
 void PrecDown(int a[],int p,int n){
 	int child,parent;
 	int temp;
 	temp=a[p];//取出根结点存放的位置
 	for(parent=p;(parent*2+1)<n;parent=child){
 		child=parent*2+1;
 		if(child!=n-1&&a[child+1]>a[child])	child++;
 		if(temp>a[child])break;
 		else a[parent]=a[child];
	 }
	  a[parent]=temp;
 	
 }
 
 void heap_sort(int a[],int n){
 	int i;int temp;
 	for(i=n/2-1;i>=0;i--){		//建立最大堆 
 		PrecDown(a,i,n);
	 }
	 for(i=n-1;i>0;i--){
	 	//删除最大堆顶
		temp=a[0];
		a[0]=a[i];
		a[i]=temp;
		PrecDown(a,0,i);  
	 }
 	
 }
 
 
 //归并排序递归版本
void merge(int a[],int tempA[] ,int l1,int l2,int r2){
     int r1,temp;
     temp=l1;
     r1=l2-1;
     while(l1<=r1&&l2<=r2){
         if(a[l1]>a[l2])tempA[temp++]=a[l2++];
         else tempA[temp++]=a[l1++];
     }
     while(l1<=r1)tempA[temp++]=a[l1++];
     while(l2<=r2)tempA[temp++]=a[l2++];
     for(int j=temp-1;j>=0;j--){
         a[j]=tempA[j];
     }
     
}
void Msort(int a[],int tempA[],int l,int r){
     int center;
     if(l<r){
         center=(l+r)/2;
         Msort(a,tempA,l,center);
         Msort(a,tempA,center+1,r);
         merge(a,tempA,l,center+1,r);
     }
}
  
//归并排序
void Merge_sort(int a[],int n){
     int *tempA;
     tempA=(int*)malloc(n*sizeof(int));
     Msort(a,tempA,0,n-1);
     free(tempA);
}


归并排序非递归版本：
void Merge_pass(int a[],int tempA[],int n,int length){
     int i,j;
     for(i=0;i<=n-2*length;i+=2*length){
         merge(a,tempA,i,i+length,i+2*length-1);
     }
     //归并最后两个子列
     if(i+length<n)merge(a,tempA,i,i+length,n-1);
     else for(j=i;j<n;j++)tempA[j]=a[j];
}
void merge_sort(int a[], int n){
     int length=1;
     int *tempA;
     tempA=(int*)malloc(n*sizeof(int));
     while(length<n){
         Merge_pass(a,tempA,n,length);
         length*=2;
         Merge_pass(tempA,a,n,length);
         length*=2;
     }
     free(tempA);
}
